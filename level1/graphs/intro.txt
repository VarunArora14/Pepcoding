if you have a num say int x=57, we have this as decimal stored as binary in memory like (111001)2
done by dividing 57 by 2 multiple times till 0 remains and then printing the 1's and 0's sequence in opposite order
But when you print, 57 will be printed and not the binary.
byte is 8 bits, short is 16 bits, int is 32 bits and long is 64 bits each representing max 2^n where n is their bits
so int is 2^32.

Let's say for nibble(2^4) we have 0000, 0001, ... 1111 we want to give them values,

1. 1 way is to make them as 0000=0, 0001=1, 0010=2 and so on but problem is that it does not handle negative numbers

2. 2nd way is to assign the first bit as sign bit where 0 is for positive and 1 for negative and use last 3 bits as values
but here another problem as 0000=0 and 1000=-0 which does not make sense as 2 0's that too with sign. Also, numbers become
lesser in value as we increase the bits which should not happen.

3. Last approach is using 0 and 1 for sign bit but use 2's complement on the number to find their value. 2's complement is when 
you take the complement of the number and add 1 to it. Example for (1000)2 take complement (0111)2 and add 1 => 0111+1= (1000) so -8
(the first bit for sign is considered before). Take 2's complement of those starting with 1 and negate their sign.
For (1001) => (0110)+1 = (0111) which is 7, negate it we have -7.
For (1111), we get (0000)+1 = (0001) and negate it we have -1.

The nums are circular starting from 1000 whose value is -8, then 1001, 1010, 1011, 1100, 1101, 1110, 1111, 0000, 0001 .. 0111
going from -8, -7, -6, ...0, 1, 2, 3, ...7

